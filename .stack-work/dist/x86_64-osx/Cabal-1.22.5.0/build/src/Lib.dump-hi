
==================== FINAL INTERFACE ====================
2016-07-22 10:55:16.272941 UTC

interface CantS_2PJu4IHxBqgIdCJt5xQ7i2:Lib 7103
  interface hash: 865aec6dcfb94f5785f9e1d96dc31c30
  ABI hash: e6b96d9d20565caa921321b61bd14dfd
  export-list hash: f136f3f0766665104737e72824895bb1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0a7b65a6dddbc4161c2e2bfabe3dc3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.main
  Lib.newRound
  Lib.nextProb
  Lib.someFunc
  Lib.testSituation
  Lib.threeCoins
  Lib.update
  Lib.Distp
  Lib.Prob
  Lib.Situation
module dependencies: Lib.Parser
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL*
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
import  -/  Lib.Parser c690bde95fde784208ab2cb85e4f8055
  exports: 1e51e1ca10f94a1b3ad5308e659c77d6
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State 3c8114545920fee1e57c3d7a07c2d0d7
import  -/  mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8:Control.Monad.State.Class 71cb030be928f92f7d8f2a86db6e1cae
import  -/  random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL:System.Random d515be7800d601546639722a30f2fed4
import  -/  transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.State.Lazy a0ae9990521f3719d0ffc837d271b7a5
2be879c14ba802325998bfb0f8d234f9
  $wthreeCoins ::
    System.Random.StdGen
    -> (# GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ w :: System.Random.StdGen ->
                 let {
                   ds :: (GHC.Types.Bool, System.Random.StdGen)
                   = case System.Random.$wrandomIvalInteger
                            @ System.Random.StdGen
                            @ GHC.Types.Int
                            System.Random.$fRandomGenStdGen
                            GHC.Num.$fNumInt
                            System.Random.getStdRandom4
                            System.Random.$fRandomBool3
                            w of ww2 { (#,#) ww3 ww4 ->
                     (case ww3 of wild2 { GHC.Types.I# ds1 ->
                      case ds1 of ds2 {
                        DEFAULT -> GHC.Types.True 0 -> GHC.Types.False } },
                      ww4) }
                 } in
                 let {
                   ds1 :: (GHC.Types.Bool, System.Random.StdGen)
                   = case System.Random.$wrandomIvalInteger
                            @ System.Random.StdGen
                            @ GHC.Types.Int
                            System.Random.$fRandomGenStdGen
                            GHC.Num.$fNumInt
                            System.Random.getStdRandom4
                            System.Random.$fRandomBool3
                            (case ds of wild { (,) firstCoin newGen ->
                             newGen }) of ww2 { (#,#) ww3 ww4 ->
                     (case ww3 of wild2 { GHC.Types.I# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT -> GHC.Types.True 0 -> GHC.Types.False } },
                      ww4) }
                 } in
                 (# case ds of wild { (,) firstCoin newGen -> firstCoin },
                    case ds1 of wild { (,) secondCoin newGen' -> secondCoin },
                    case System.Random.$wrandomIvalInteger
                           @ System.Random.StdGen
                           @ GHC.Types.Int
                           System.Random.$fRandomGenStdGen
                           GHC.Num.$fNumInt
                           System.Random.getStdRandom4
                           System.Random.$fRandomBool3
                           (case ds1 of wild { (,) secondCoin newGen' ->
                            newGen' }) of ww2 { (#,#) ww3 ww4 ->
                    case ww3 of wild2 { GHC.Types.I# ds2 ->
                    case ds2 of ds3 {
                      DEFAULT -> GHC.Types.True 0 -> GHC.Types.False } } } #)) -}
df927cd25cc4cc40172670fa7b1f4a33
  type Distp = GHC.Types.Int
0fd561351ba8f497b2d3436ed3243091
  type Prob = GHC.Types.Double
83f5a51897a4c79eaf264a6c489fcc62
  type Situation = [(GHC.Types.Int, Lib.Prob)]
0f59d092f7191bb154b4c92867d07409
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e597df6c85e6544ea8a546af5c578602
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case System.IO.readIO8
                        @ [GHC.Types.Int]
                        (Text.ParserCombinators.ReadP.run
                           @ [GHC.Types.Int]
                           Lib.main2
                           ipv1) of wild {
                   []
                   -> case GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ [GHC.Types.Int]
                             System.IO.readIO5
                             ipv
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        [] -> (# ipv, GHC.Tuple.() #)
                        : ipv2 ipv3
                        -> case GHC.Prim.raiseIO#
                                  @ GHC.Exception.SomeException
                                  @ [GHC.Types.Int]
                                  System.IO.readIO2
                                  ipv
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } }) -}
46e15b8e706bf154ad89fbb0b78dd3a9
  main2 :: Text.ParserCombinators.ReadP.P [GHC.Types.Int]
  {- Unfolding: (GHC.Read.$wa
                   @ GHC.Types.Int
                   GHC.Read.$fReadInt2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GHC.Types.Int>_R))
                   @ [GHC.Types.Int]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [GHC.Types.Int])) -}
d0765f22fc5d11678c4b84f52438e83a
  newRound :: [GHC.Types.Bool] -> Lib.Situation -> Lib.Situation
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ bs :: [GHC.Types.Bool] ss :: Lib.Situation ->
                 GHC.Base.build
                   @ (GHC.Types.Int, Lib.Prob)
                   (\ @ b1
                      c1 :: (GHC.Types.Int, Lib.Prob) -> b1 -> b1[OneShot]
                      n :: b1[OneShot] ->
                    GHC.List.foldr2
                      @ GHC.Types.Bool
                      @ (GHC.Types.Int, Lib.Prob)
                      @ b1
                      (GHC.List.zipWithFB
                         @ (GHC.Types.Int, Lib.Prob)
                         @ b1
                         @ b1
                         @ GHC.Types.Bool
                         @ (GHC.Types.Int, Lib.Prob)
                         c1
                         Lib.nextProb)
                      n
                      bs
                      ss)) -}
29b0ba103c08ea9479e00254ba80908e
  nextProb ::
    GHC.Types.Bool
    -> (GHC.Types.Int, Lib.Prob) -> (GHC.Types.Int, Lib.Prob)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U(U,1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Bool w1 :: (GHC.Types.Int, Lib.Prob) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case w of wild {
                   GHC.Types.False
                   -> (ww1,
                       case ww2 of wild1 { GHC.Types.D# x ->
                       GHC.Types.D# (GHC.Prim./## (GHC.Prim.*## x 5.0) 6.0) })
                   GHC.Types.True
                   -> (ww1,
                       case ww2 of wild1 { GHC.Types.D# x ->
                       GHC.Types.D# (GHC.Prim./## x 6.0) }) } }) -}
593220afca61b3d59f770b9a1a43d5c3
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
bce42c470aa665761dbd6508f9c3f2cf
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Lib.someFunc2
                   GHC.Types.True
                   eta) -}
235ec74c7091f0a733b6a634d5f99b25
  someFunc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "someFunc"#) -}
bb2edd640445f72b27da4c392b6452bd
  testSituation :: Lib.Situation
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Lib.Prob)
                   Lib.testSituation8
                   Lib.testSituation1) -}
0123bc1c136f946dbc4db6e49802c2ae
  testSituation1 :: [(GHC.Types.Int, Lib.Prob)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Lib.Prob)
                   Lib.testSituation6
                   Lib.testSituation2) -}
e6afd59da23de161ea96d02fe16bb4d7
  testSituation2 :: [(GHC.Types.Int, Lib.Prob)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Lib.Prob)
                   Lib.testSituation3
                   (GHC.Types.[] @ (GHC.Types.Int, Lib.Prob))) -}
00854a507b18385c9db7f34d0a6b0276
  testSituation3 :: (GHC.Types.Int, GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.testSituation5, Lib.testSituation4)) -}
0f2b450e86d636b6a70ce62b1ad84917
  testSituation4 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0) -}
e0e7821c0f7960492fb5ad03772d193c
  testSituation5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3) -}
35ee007ea63cc992717761fdfa79050a
  testSituation6 :: (GHC.Types.Int, GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.testSituation7, Lib.testSituation4)) -}
57034117a6fade8d6ea0420845431ca4
  testSituation7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
6d66c2d1230c64f3061c86a9a217770d
  testSituation8 :: (GHC.Types.Int, GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Lib.testSituation9, Lib.testSituation4)) -}
cd5167dd6fdeb00be06572085f4ad854
  testSituation9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
e50f0071c3fe92bcef8ef41c9349279e
  threeCoins ::
    System.Random.StdGen
    -> (GHC.Types.Bool, GHC.Types.Bool, GHC.Types.Bool)
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: System.Random.StdGen ->
                 case Lib.$wthreeCoins w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
0c13c7d14f8ad415452f641fc62fe0df
  update ::
    [GHC.Types.Bool]
    -> Control.Monad.Trans.State.Lazy.State Lib.Situation ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><L,1*U>m,
     Unfolding: InlineRule (0, True, True)
                Lib.update1
                  `cast`
                (<[GHC.Types.Bool]>_R
                 ->_R Trans
                          (<[(GHC.Types.Int, Lib.Prob)]>_R
                           ->_R Sym (Data.Functor.Identity.NTCo:Identity[0]
                                         <((), [(GHC.Types.Int, Lib.Prob)])>_R))
                          (Sym (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                                    <[(GHC.Types.Int, Lib.Prob)]>_N
                                    <Data.Functor.Identity.Identity>_R
                                    <()>_N))) -}
208f8a58f32c4cb256d469f50e763d42
  update1 ::
    [GHC.Types.Bool]
    -> [(GHC.Types.Int, Lib.Prob)] -> ((), [(GHC.Types.Int, Lib.Prob)])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><L,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ bs :: [GHC.Types.Bool] eta :: [(GHC.Types.Int, Lib.Prob)] ->
                 (GHC.Tuple.(),
                  GHC.Base.build
                    @ (GHC.Types.Int, Lib.Prob)
                    (\ @ b1
                       c1 :: (GHC.Types.Int, Lib.Prob) -> b1 -> b1[OneShot]
                       n :: b1[OneShot] ->
                     GHC.List.foldr2
                       @ GHC.Types.Bool
                       @ (GHC.Types.Int, Lib.Prob)
                       @ b1
                       (GHC.List.zipWithFB
                          @ (GHC.Types.Int, Lib.Prob)
                          @ b1
                          @ b1
                          @ GHC.Types.Bool
                          @ (GHC.Types.Int, Lib.Prob)
                          c1
                          Lib.nextProb)
                       n
                       bs
                       eta))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

